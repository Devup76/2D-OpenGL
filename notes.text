#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include "stb_image.h"

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <iostream>
#include <fstream>
#include <sstream>

class Sprite {
public:
    Sprite(const char* texturePath, float x, float y, float width, float height);
    ~Sprite();

    void Draw();

private:
    unsigned int VAO, VBO, EBO, texture;
    glm::mat4 modelMatrix;

    void setupSprite();
};

Sprite::Sprite(const char* texturePath, float x, float y, float width, float height) {
    modelMatrix = glm::mat4(1.0f);
    modelMatrix = glm::translate(modelMatrix, glm::vec3(x, y, 0.0f));
    modelMatrix = glm::scale(modelMatrix, glm::vec3(width, height, 1.0f));

    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);

    glBindVertexArray(VAO);

    setupSprite();

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    // Set the vertex attribute pointers
    // ...

    // Load and create the texture
    glGenTextures(1, &texture);
    glBindTexture(GL_TEXTURE_2D, texture);

    // Set the texture parameters
    // ...

    // Load the image, create texture, generate mipmaps
    // ...

    glBindVertexArray(0); // Unbind VAO
}

void Sprite::setupSprite() {
    // Set up the vertices for a simple quad
    // ...

    // Specify the vertex attribute pointers
    // ...
}

Sprite::~Sprite() {
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteTextures(1, &texture);
}

void Sprite::Draw() {
    // Set shader uniforms
    // ...

    // Set model matrix uniform
    // ...

    // Bind texture
    // ...

    // Draw the sprite
    glBindVertexArray(VAO);
    glDrawArrays(GL_TRIANGLES, 0, 6);
    glBindVertexArray(0);
}

int main() {
    // Initialize GLFW, create window, etc.

    // ...

    // Initialize GLAD, create shader program, etc.

    // ...

    Sprite mySprite("path_to_texture.png", 0.0f, 0.0f, 0.2f, 0.2f);

    while (!glfwWindowShouldClose(window)) {
        // Input handling

        // ...

        // Rendering
        glClear(GL_COLOR_BUFFER_BIT);

        // Draw sprite
        mySprite.Draw();

        // Swap buffers and poll events
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    // Cleanup and terminate GLFW

    // ...

    return 0;
}
